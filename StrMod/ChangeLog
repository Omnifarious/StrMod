1999-07-20  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testmulti.cxx: Changed to accomodate the fact that
	ProcessorModule, NewlineChopper, and PassThrough don't exist yet.
	Also altered to fit new way of doing things.

	* StrMod/SimpleMulti.h: 
	* SimpleMulti.cxx: Completely redid SimpleMultiplexer to fit into
	new way of doing things.

	* StrMod/StreamModule.h: Changed to include new <cassert> and
	<cstddef> header files instead of <assert.h> and <stddef.h>
	(Plug::getFlagsFrom): Changed to return a reference to the Flags
	structure.  Should be a little more efficient.

	* StrMod/StrChunk.h: Changed to include new <cassert> header file
	instead of <assert.h>

	* StreamFDModule.cxx (plugWrite): Added a case to try to better
	handle writing an EOF.
	(doWriteFD): Added yet another way to determine the value of
	MAXIOVCNT.
	Added miscellaneous commented out debugging statements.

	* SocketModule.cxx (SHUT_WR): Added #define for SHUT_WR so I could
	use the symbolic argument to shutdown on Linux systems.

	* STR_ClassIdent.cxx: Added comment line for
	SimpleMultiplexer::ScanEvent

1999-03-19  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StreamSplitter.cxx: Simplified logic for determining the value
	passed into setReadable or setWriteable.  Added some commented out
	debugging.

	* SocketModule.cxx: Fixed to use new FDUtil::setNonBlock function.
	Added some commented out debugging.

1999-01-31  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/echoserv.cxx (main): Fixed a small type error (with a cast
	:-P ) in how the adresses connected from were printing out.

	* StrMod/FDUtil.h: 
	* FDUtil.cxx: The new FDUtil class.  A set of utility functions
	for file descriptors.

	* StreamFDModule.cxx: Added more commented out debugging.

1999-01-22  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testsock.cxx: Made code to set file descriptors to
	non-blocking use the new FDUtil class.

	* SockListenModule.cxx (doAccept): Fixed an error introduced by
	the earlier 64 bit change.

	* StrMod/StreamModule.h (setReadable):
	(setWriteable): Made setReadable and setWriteable check to see if
	the plug was plugged in before trying to work with the plug the
	plug was plugged into.

	* StrMod/DBStrChunk.h (DataBlockStrChunk): Fixed an incredibly
	stupid error in the 'make DataBlockStrChunk from memory block'
	constructor.

1999-01-17  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testsock.cxx: Attempted to fix the problem of stdin and
	stdout being left non-blocking on program exit.

	* StrSubChunk.cxx (StrSubChunk): Changed to automatically make a
	StrSubChunk of a StrSubChunk into just a StrSubChunk.

	* StrMod/StreamFDModule.h:
	* StreamFDModule.cxx: Fixed a number of stupid errors in how error
	categories were handled.

	* SockListenModule.cxx (doAccept): Fixed to handle systems that
	need accept to take an int * instead of a size_t *.  This first
	happened to me on an Alpha, which is a 64 bit architecture.  I'm
	sure it's that way to maintain compatibility with old, non 64-bit
	binaries using the accept call.

	* LinearExtent.cxx (SubExtent_eq): Made to handle
	a.SubExtent_eq(a).

1999-01-14  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testsplit.cxx:
	* tests/testsock.cxx:
	* tests/echoserv.cxx: Changed to make use of the new ability to
	read and write EOF indications.

	* StrMod/StreamFDModule.h:
	* StreamFDModule.cxx: Added support for the ability to read and
	write EOF indications.

	* StrMod/SocketModule.h:
	* SocketModule.cxx (writeEOF): Added support for writing an EOF
	indication to a socket.

	* StrMod/EOFStrChunk.h:
	* EOFStrChunk.cxx: A new class for sending an EOF indication down
	a stream.

1999-01-13  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/echoserv.cxx: Changed to use new StreamModule system so
	SockListenModule could be properly tested.

	* StrMod/StrChunkPtrT.h: Fixed incredibly stupid mistake in
	typedef for super1.

	* StrMod/SocketModule.h: Added explanatory comment.
	Added class forward decl to make sure the right class is being
	talked about.

	* StreamFDModule.cxx: Added some commented out debugging.
	(StreamFDModule::~StreamFDModule): Now calls
	UNIXpollManager::freeFD for the descriptor the StreamFDModule was
	taking care of.

	* StrMod/StreamFDModule.h: Made more const correct.  Added cop-out
	getFD method for getting the file descriptor if need be.

	* StrMod/SockListenModule.h:
	* SockListenModule.cxx: Rewritten to make this fit withing the new
	StreamModule framework.

1999-01-12  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testsplit.cxx: Removed spurious include.  Added check for
	an empty write buffer so we don't die prematurely.

	* tests/testsock.cxx: A new test for the SocketModule class.

	* SocketModule.cxx: 
	* StrMod/SocketModule.h: Various changes to clean up the interface
	a little.  No changes really needed to make it part of the new
	StreamModule system.

	* StrMod/StreamFDModule.h: Various small changes designed to make
	the interface more generally useful.

1999-01-08  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StrChunk.h: 
	* StrMod/DBStrChunk.h: Added better comments.

1998-12-30  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* tests/testsplit.cxx: A new test that tests StreamFDModules,
	EchoModules, and StreamSplitterModules together.  It just copies
	stdin to stdout.

	* StreamSplitter.cxx: 
	* StrMod/StreamSplitter.h: Completely overhauled this class to fit
	within the new StreamModule system.

	* StrMod/StreamModule.h: Numerous changes to cause StreamModules
	to have a much more aggresive policy with regards to pushing data
	through the system.  The creation of the SplitterModule had
	introduced a case in which the data stream could become stalled.
	These have been fixed.

	* StrChunkPtr.cxx: 
	* StrMod/StrChunkPtrT.h: 
	* StrMod/StrChunkPtr.h: 
	* StrMod/StrChunk.h: Changed the whole face of the StrChunkPtr
	class to be derived from RefCountPtrT<StrChunk> because with
	current compiler has rendered this a safe thing to do, and it more
	accurately reflects semantics anyway.  As part of this, StrChunk
	has also been changed to derive from ReferenceCounting, because
	that is also more consistent with semantics, and allows the
	previously mentioned change.

	* STR_ClassIdent.cxx: Changed some class name comments to reflect
	new class names.

	* EchoModule.cxx (otherIsWriteable):
	(otherIsReadable): Added some code to make sure all of the plug
	readable/writeable flags were set properly in all situations.

1998-12-18  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* DBStrChunk.cxx: Removed a couple of lines that were used for
	debugging.

1998-11-02  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* STR_ClassIdent.cxx: Changed a couple of comments to better
	reflect reality.

	* GroupVector.cxx: Fixed small syntax errors that g++ should've
	caught.

	* GV_Iterator.cxx: Fixed small syntax errors that g++ should've
	caught.

	* EchoModule.cxx (EchoModule::EchoModule): Changed call of plug
	constructor in module constructor to conform to new interface.

	* StrMod/StreamModule.h: Changed comments now that I've fixed the
	perceps multi-line comment bug.

	* StrMod/StrChunkPtr.h (class StrChunkPtr): Changed operator bool
	to the more proper (with my bool.h) bool_cst.

	* StrMod/EchoModule.h (class EchoModule): Fixes a few things that
	g++ shoud've caught, but didn't somehow.  Added a destructor and
	constructor for EchoModule::EPlug.

	* tests/teststrfd.cxx: Added this file for simple StreamFDModule
	and EchoModule test.

	* StreamFDModule.cxx: 
	* StrMod/StreamFDModule.h: Initial checkin of StreamFDModule
	conforming to splendiferous new architecture.

1998-08-23  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/EchoModule.h (class EchoModule): 
	* StrMod/StreamModule.h (class StreamModule): Changed interface of
	ownsPlug to be more const correct.

	* GroupVector.cxx (GroupVector): Changed order of members in
	initialization list to correspond to actual initialization order.
	Changed type of index to be correct.

	* GroupChunk.cxx (AccumulateRange): Added initializations for two
	local variables to prevent possible bugs.

	* LinearExtentStrmOp.cxx (operator <<): Changed to return the
	value it's supposed to return.

	* InSerializer.cxx (Impl constructor): Changed order of members in
	initialization list to correspond to actual initialization order.

	* StrMod/StrChunk.h: Removed RCS id thingy from header file.

1998-06-29  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/EchoModule.h: 
	* EchoModule.cxx: A complete retooling as part of my StreamModule
	makeover.  Not tested yet.

	* StrMod/StreamModule.h: 
	* StreamModule.cxx: Began my total StreamModule framework
	makeover.  The purpose of this is to make writing new modules
	simpler and less pitfall laden.  I also want to make use of the
	new UniEvent framework, and make the modules that talk to the
	outside world use the new mechanism built into the UniEvent
	framework.  Not tested yet.

Mon Apr 14 18:55:24 1997  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* GNUmakefile.in: Added new .cxx files to library.  Added
	testserial test program.  Changed CCNAMES to be composed of all
	the different kinds of cxx/cc files instead of having a whole
	bunch of unspecified files tacked on the end.

	* InSerializer.cxx:
	* StrMod/InSerializer.h: Added class to aid in serialization of
 	simple data tyes.

Fri Apr 11 12:42:30 1997  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* OutSerializer.cxx:
	* StrMod/OutSerializer.h: Added OutSerializer class for simple
	serialization of basic data types.

Mon Dec  9 19:52:10 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* GroupVector.cxx (FillIOVecDesc): Fixed an error involving a
	misplaced increment.

Wed Oct 23 05:12:12 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StreamModule.h: Made a number of cosmetic readability
 	improvements.

	* StrMod/StreamFDModule.h (CanWrite): Cosmetic change to make
	operator precedence more obvious.

	* StrFDPlug.cxx (outputReady): Fixed an = vs. == bug that caused
	StreamFDModule to stop being able to write.

Sat Sep 21 13:35:04 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* GNUmakefile.in: Changed .cc to .cxx to reflect new naming
 	scheme.  This should probably be done retroactively, but that
 	would be a BIG pain.

	* StrMod/GV_Iterator.h (GroupVector::Iterator::operator +=): Fixed
 	stupid bug that caused advances of only one character, no matter
 	what skip said.

	* utils/writelots.c: Used memset instead of for loop to set
	block.  Used more appropriate looping construct.

	* StrMod/StreamFDModule.h: 
	* StrFDPlug.cxx: Moved the guts of the file I/O (the stuff that
	actually reads on writes to the file descriptor) out of StrFDPlug,
	and put it into StreamFDModule::DoWriteFD, and
	StreamFDModule::DoReadFD.  This makes StreamFDModule a little
	easier to inherit from.

	* StrMod/LinearExtent.h: 
	* LinearExtent.cxx (LinearExtent::SubExtent_eq): Changed to return
 	const LinearExtent & to be more like x= operators.

Wed Sep 11 18:07:12 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StreamProcessor.h (CanAddIncoming): Changed to use
	StrChunkPtr operator ! instead of comparison to 0.

	* StrMod/GroupVector.h: 
	* GroupVector.cxx: Changed class GroupVector to be a little more
	STL like.  Added SafeToDelete method.

Mon Sep  2 18:04:03 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* ProcessorModule.cc (i_Write): Commented out all kinds of
 	debugging stuff.

	* GNUmakefile.in (LIBCCS): Added new library source modules for
	CharChopper, PassThrough, NewlineChopper, StreamProcessor, and
	ProcessorModule classes.

	* tests/testmulti.cc: Added code to test the ProcessorModule,
 	NewlineChopper, PassThrough, and StreamProcessor classes.

	* StrChunkid.cc: Removed a file that's no longer needed because
 	identifiers are now declared inside the main source modules for
 	the classes they identify.

	* StrMod/StreamProcessor.h: * StreamProcessor.cc: Created abstract
 	class for handling simple dataflows where one grabbed incoming
 	data, did stuff to it, and sent the result along.

	* StrMod/ProcessorModule.h: 
	* ProcessorModule.cc: Added class that would turn two
 	StreamProcessors into a StreamModule that used one StreamProcessor
 	for the data flowing in each direction.

	* StrMod/CharChopper.h: 
	* CharChopper.cc: Added CharChopper class so users would have a
 	simple class that would break up and recombine streams using
 	whatever character they chose as a separator.

	* StrMod/PassThrough.h: 
	* PassThrough.cc: Added PassThrough class to use when you needed a
	StreamProcessor that did nothing except buffer one Chunk worth of
	data.

	* StrMod/NewlineChopper.h: 
	* NewlineChopper.cc: Added NewlineChopper class so users would
 	have a simple class that would break up and recombine streams
 	using '\n' as a separator.

	* STR_ClassIdent.cc: Added new classes to class id comment list.

	* StrMod/DBStrChunk.h (DataBlockStrChunk): Changed inline
 	definition of constructor to take correct type as argument.

	* config.h:
	* sockdecl.h: 
	* StrFDPlug.cc: 
	* SocketModule.cc: 
	* SockListenModule.cc: Added a crude attempt at fixing
	deficiencies in AIX 3.2.5's include files with respect to socket
	calls.
	
	* StreamFDModule.cc (BestChunkSize): Changed to try to handle
	systems that don't set st_blksize for sockets.  Used 4096 as a
	default block size.

Sat Aug 31 10:42:12 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/EchoModule.h: 
 	* EchoModule.cc (class EchoModule): Changed to use
 	StrChunkPtr::operator bool a little more explicity.  Used to
 	compare pointer values to 0.

	* SimpleMulti.cc: Fixed several bugs in class SimpleMultiplexer
	that caused it to lock up when searching for the plug list.

Sat Aug 24 07:37:48 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StrChunkPtr.h (class StrChunkPtr): Added new operator !
	method as a counterpart to the operator bool conversion.

	* tests/testmulti.cc: Added new test program for SimpleMultiplexer
	class.

	* StrMod/SimpleMulti.h:
	* SimpleMulti.cc: Added new SimpleMultiplexer class, and related
 	plug classes.  This implements a simple multiplexer that
 	duplicates all input on the 'single' side to all the plugs
 	attached to the 'multi' side, and combines all the data from the
 	'multi' side into one flow on the 'single' side.

	* StrMod/SimplePlug.h: 
	* SimplePlug.cc: Added new SimplePlug class, and SimplePlug
 	template.  These are abstract classes that handle details of read
 	and write locking on a plug.  Classes derived from these have much
 	simpler implementations.

	* STR_ClassIdent.cc: Added new class numbers for SimplePlug and
	SimpleMulti related classes.

Sun Jul  7 00:09:41 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StrChunkPtr.h (class StrChunkPtr): Fixed default
	implementation of i_CheckType to actually be correct.

	* StrMod/StreamFDModule.h (class StreamFDModule): Arranged for
	max_block_size to be initialized correctly.

	* StreamFDModule.cc: Fixed a problem with the initialization of
 	max_block_size.  Used to rely on StrChunkio crud for a solution.

	* StrFDPlug.cc: Added, then commented out some debugging.
	Rearranged statements to make logic clearer.

	* StreamModule.cc: Added, then commented out some debugging.  I
	left it there because it might be useful someday.

Fri Jul  5 13:19:20 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrChunkio.cc: Dropped.  Functionality split between StrChunk.cc
 	and StrFDPlug.cc.  Some functionality no longer necessary because
 	of new StrChunkPtr system.

	* EchoModule.cc: Killed OS2 garbage.
	(DeletePlug): Removed reference to obsolete PutIntoFd funtion.
	(InternalRead): Changed to use new StrChunkPtr system.
	(ReadableNotify):
	(WriteableNotify): Removed because default implementation is
	correct.
	(Write): Changed to use new StrChunkPtr interface.

	* StrMod/EchoModule.h (class EchoModule): Changed to use new
	StrChunkPtr system.
	(class EchoPlug): Change to use new StrChunkPtr system, and new
	parent module system.

	* StrMod/StreamModule.h (StrPlug): Added assert to check for bad
	parent pointers.

	* StrChunkPtr.cc (StrChunkPtr::i_SetPtr): Removed unused addref
	parameter,

	* StrMod/StrChunkPtr.h (class StrChunkPtr): Changed i_SetPtr to be
 	non-virtual.  Removed unused addref parameter.  Added i_CheckType
	so implementing StrChunkPtrT would be easier and result in more
	efficient code.
	(StrChunkPtr::operator =): Added call to i_CheckType to make
	StrCunkPtr's typesafe.  Changed call to internal i_GetPtr to
	external GetPtr.  Added missing returns.

	* SockListenModule.cc (SockListenModule): Formatting changes so it
	looks prettier.
	(my_InternalRead): Adapted from old InternalRead.  Changed to use
	new StrChunkPtr stuff.
	(inputReady): Changed the way the address buffer was handled in an
	attempt to reduce executable size, and make re-entrant.
	(inputReady): Changed to used ANSI C string concatenation instead
	of multiple cerr << statements to reduce code size.
	(ListeningPlug): Changed to use new parent module handling.
	(ListeningPlug::Write): Changed to use new StrChunkPtr style
	interface.
	(SocketModule::junk): Removed, no longer needed for StrChunkPtr
	style StrChunk handling.

	* StrMod/SockListenModule.h (class SocketModuleChunk): Moved
	declaration so I could have StrChunkPtrT<SocketModuleChunk>. Also
	changed interface for new StrChunk stuff.
	Added typedef SocketModuleChunkPtr StrChunkPtrT<SocketModuleChunk>
	(class ListeningPlug): Changed interface to use new StrChunkPtr
	stuff.  And new parent module handling from StrPlug.

Sat Jun 29 01:26:16 1996  Eric M. Hopper  <hopper@omnifarious.mn.org>

	* StrMod/StreamModule.h (class StrPlug): Moved data members to
	private section.  Made copy constructor and assignment private to
	prevent accidental use.

	* StreamSplitter.cc (InternalRead): Changed to use StrChunkPtr
	instead of StrChunk *
	(Write): Changed to use StrChunkPtr instead of StrChunk *

	* StrMod/StreamSplitter.h (class SplitterPlug): Changed to use
	StrChunkPtr instead of StrChunk *

	* StrFDPlug.cc (InternalRead): Changed to used StrChunkPtr instead
 	of StrChunk *
	(inputReady):
	(outputReady): Changed to use new StrChunk style.
	(ReadableNotify):
	(WriteableNotify): Changed to be close to safer 'standard'
 	implementation.
	(Write): Changed to use StrChunkPtr instead of StrChunk *

	* StreamFDModule.cc: Changed include for StrChunk.h to
	DBStrChunk.h now that DataBlockStrChunk has been split out.
	(StreamFDModule): Changed constructor to initialize new members,
	and to use an initialization list.

	* StrMod/StreamModule.h (class StrPlug): Changed interfaces to use
 	const StrChunkPtr & instead of StrChunk *, and also changed things
 	so StrPlug now has a parent_ member, and a good default
 	implementation of ReadableNotify, and WriteableNotify.

	Removed old obsolete chunk identification stuff.
	* StrMod/ChunkType.h: 
	* ChunType.cc: 

	StrChunk_done tag

	* GNUmakefile.in (LIBCCS): Arranged to be more rational.
	(CCNAMES): Arranged to be more rational.
	(CNAMES): Arranged to be more rational.
	(tests/testchunk): Updated target to avoid linking library.
	(tests/testextent): New target.  Test class LinearExtent.
	(tests/testGV): New target.  Test lots, especially GroupVector.

	* tests/testextent.cc: Attempt to extensively test LinearExtent
	class, both in terms of performance and functionality.

	* tests/testGV.cc: New test to work the GroupVector, and some of
	the other components of the new StrChunk style.

	* tests/testchunk.cc: Changed to use new StrChunk style.

	New class StrSubChunk used to make a part of an existing chunk
	look like a full chunk to the outside world.
	* StrMod/StrSubChunk.h:
	* StrSubChunk.cc:

	New class StrChunkPtr that acts as a reference counted pointer to
	StrChunk
	* StrMod/StrChunkPtr.h:
	* StrChunkPtr.cc: 

	* LinearExtentStrmOp.cc: New file for implementation of stream
	operator for class LinearExtent.

	New class GroupChunk to hold a group of chunks and make them
	appear to be one chunk.
	* StrMod/GroupChunk.h:
	* GroupChunk.cc:

	* STR_ClassIdent.cc: Changed comment style to be more rational and
	added comments for new classes.

	* LinearExtent.cc (SubExtent): Added const qualifier.
	(SubExtent_eq): New function, in place SubExtent calc.

	Added totallength_ field to class GroupVector.
	* StrMod/GroupVector.h: Update totallength_ field when needed.
	* GroupVector.cc: Added initialization for totallength_

	Moved from StrChunk.h and StrChunk.cc along with re-working for
	new StrChunk handling.
	* StrMod/DBStrChunk.h:
	* DBStrChunk.cc: 

 	Completely re-worked for new StrChunk handling.
	* StrMod/StrChunk.h:
	* StrChunk.cc:
